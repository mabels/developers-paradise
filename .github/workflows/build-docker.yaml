name: Build Docker

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "3 3 * * 0"

permissions:
  id-token: write
  contents: read

jobs:
  prepare:
    name: Prepare Versions
    # X64 we need for nodegit
    # runs-on: ['self-hosted', 'Linux', 'X64']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: mabels/neckless@main
        with:
          version: v0.1.15

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: arn:aws:iam::973800055156:role/developers-paradise-github-runner
          aws-region: eu-central-1
          role-session-name: GitHubAction

      - shell: bash
        name: OCI Write Config and Key File
        env:
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          mkdir $HOME/.oci
          neckless kv ls OCI_KEY_FILE@$HOME/.oci/instances_oci_api_key.pem
          eval $(neckless kv ls OCI_CONFIG --shEvalKeyValue)
          echo $OCI_CONFIG > $HOME/.oci/config
          unset OCI_CONFIG
          cp .github/workflows/oci-via.docker /usr/local/bin/oci
          chmod +x /usr/local/bin/oci
          oci --version 
          cat $HOME/.oci/config
          oci setup repair-file-permissions --file $HOME/.oci/config
          oci setup repair-file-permissions --file $HOME/.oci/instances_oci_api_key.pem
          #curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          #chmod +x install.sh
          #./install.sh --accept-all-defaults
          #echo "$HOME/bin" >> $GITHUB_PATH

      - shell: bash
        name: prepare
        env:
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          eval $(neckless kv ls --ghAddMask  --shKeyValue GITHUB_ACCESS_TOKEN)
          which oci
          bash .github/workflows/run-oci-github-worker.sh "${{github.sha}}" x86_64
          bash .github/workflows/run-oci-github-worker.sh "${{github.sha}}" aarch64
          for i in $(find . -name "oci.*.worker")
          do
            echo "Special OCI-Worker instances: $worker -- $(jq -r '.data.id' < $i)"
          done
          #aws sts get-caller-identity
          #bash .github/workflows/run-ec2-github-worker.sh "${{github.sha}}" x86_64
          #bash .github/workflows/run-ec2-github-worker.sh "${{github.sha}}" aarch64
          #for i in $(find . -name "ec2.*.worker")
          #do
          #  echo "Special EC2-Worker instances: $worker -- $(jq -r '.Instances[0].InstanceId' < $i)"
          #done
          eval $(neckless kv ls --ghAddMask  --shKeyValue APIUSER)
          make prepare.tar APIUSER=${APIUSER} DOCKER=docker

      - name: Upload prepare.tar
        uses: actions/upload-artifact@v1
        with:
          name: prepare.tar
          path: prepare.tar

  update-manifest:
    # X64 we need for nodegit
    # runs-on: ['self-hosted', 'Linux', 'X64']
    runs-on: ubuntu-latest
    name: Update-Manifest
    needs: docker-build
    steps:
      - uses: actions/checkout@v2

      - uses: mabels/neckless@main
        with:
          version: v0.1.12

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: arn:aws:iam::973800055156:role/developers-paradise-github-runner
          aws-region: eu-central-1
          role-session-name: GitHubAction


      - name: extract prepare.tar
        uses: actions/download-artifact@v1
        with:
          name: prepare.tar

      - name: Write Manifest
        env:
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          tar xf ./prepare.tar/prepare.tar
          export DOCKER_CONFIG=$HOME/.docker
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          make manifest REPO=public.ecr.aws/d3g6c8d4 \
            ARCHSELECT="--archSelect x86_64 --archSelect aarch64" DOCKER=docker \
            MANIFEST_TOOL="docker run -v $DOCKER_CONFIG:/.docker -v $(pwd):/app  -w /app -t mplatform/manifest-tool:latest"
          make clean_repo
          
          # eval $(neckless kv ls --ghAddMask  --shKeyValue AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)
    

  docker-build:
    runs-on: ${{ matrix.platform }}
    needs: prepare
    strategy:
      matrix:
        include:
          - platform: ['self-hosted', 'linux', 'ARM64', '${{github.sha}}']
            arch: arm64
          - platform: ['self-hosted', 'linux', 'X64', '${{github.sha}}']
            arch: amd64
#         - platform: ubuntu-latest
#           arch: arm

    name: Build Docker ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2

      - uses: mabels/neckless@main
        with:
          version: v0.1.12

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: arn:aws:iam::973800055156:role/developers-paradise-github-runner
          aws-region: eu-central-1
          role-session-name: GitHubAction

      - name: extract prepare.tar
        uses: actions/download-artifact@v1
        with:
          name: prepare.tar

      - name: Build Docker
        env:
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
          MATRIX_ARCH: ${{ matrix.arch }}
          # DOCKERHUB: ${{ secrets.DOCKERHUB }}
        run: |
          sudo apt update -y
          sudo apt install -y docker.io
          sudo chmod 666 /run/docker.sock
          tar xf ./prepare.tar/prepare.tar
          export DOCKER_CONFIG=$HOME/.docker
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          make all REPO=public.ecr.aws/d3g6c8d4 DOCKER="docker"
          make push REPO=public.ecr.aws/d3g6c8d4 DOCKER="docker"
          
          # eval $(neckless kv ls --ghAddMask  --shKeyValue AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)
          #find . -ls | grep -v node_modules
          # make -dn all REPO=public.ecr.aws/d3g6c8d4

      # - name: Kill the EC2's
      #   if: always()
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: test-results
      #     path: app/build

  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    if: always()
    needs: [prepare, update-manifest, docker-build]
    steps:
      - uses: actions/checkout@v2

      - name: extract prepare.tar
        uses: actions/download-artifact@v1
        with:
          name: prepare.tar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: arn:aws:iam::973800055156:role/developers-paradise-github-runner
          aws-region: eu-central-1
          role-session-name: GitHubAction

      - shell: bash
        name: 'OCI Write Config & Key Files'
        run: |
          mkdir $HOME/.oci
          neckless kv ls OCI_KEY_FILE@$HOME/.oci/instances_oci_api_key.pem
          eval $(neckless kv ls OCI_CONFIG --shEvalKeyValue)
          echo $OCI_CONFIG > $HOME/.oci/config
          unset OCI_CONFIG
          oci --version || true
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          oci --version 

      - shell: bash
        name: terminate ec2
        run: |
          tar xf ./prepare.tar/prepare.tar
          for i in $(find . -name "ec2.*.worker")
          do
            echo "EC2 to terminate: $i -- $(jq -r '.Instances[0].InstanceId' < $i)"
            aws ec2 terminate-instances --instance-ids $(jq -r '.Instances[0].InstanceId' < $i)
          done
          for i in $(find . -name "oci.*.worker")
          do
            echo "OCI to terminate: $i -- $(jq -r '.data.id' < $i)"
            oci --auth api_key \
              compute instance terminate \
              --instance-id $(jq -r '.data.id' < $i) \
              --force
          done
