name: Build Docker

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "3 3 * * *"

jobs:
  prepare:
    name: Prepare Versions
    # X64 we need for nodegit
    # runs-on: ['self-hosted', 'Linux', 'X64']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - shell: bash
        env:
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          eval $(neckless kv ls --ghAddMask  --shKeyValue APIUSER AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)
          make prepare.tar APIUSER=${APIUSER} 
          make clean_repo 
          # find . -ls | grep -v node_modules

      - name: Upload prepare.tar
        uses: actions/upload-artifact@v1
        with:
          name: prepare.tar
          path: prepare.tar

  update-manifest:
    # X64 we need for nodegit
    # runs-on: ['self-hosted', 'Linux', 'X64']
    runs-on: ubuntu-latest
    name: Update-Manifest
    needs: docker-build
    steps:
      - uses: actions/checkout@v2

      - name: extract prepare.tar
        uses: actions/download-artifact@v1
        with:
          name: prepare.tar

      - name: Write Manifest
        env:
          DOCKERHUB: ${{ secrets.DOCKERHUB }}
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          tar xf ./prepare.tar/prepare.tar
          export DOCKER_CONFIG=$HOME/.docker
          eval $(neckless kv ls --ghAddMask  --shKeyValue AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          aws ecr-public get-login-password --region us-east-1 | podman login --username AWS --password-stdin public.ecr.aws
          make manifest REPO=public.ecr.aws/d3g6c8d4 \
           ARCHSELECT="--archSelect x86_64 --archSelect aarch64"


  docker-build:
    runs-on: ${{ matrix.platform }}
    needs: prepare
    strategy:
      matrix:
        include:
          - platform: ubuntu-latest
            arch: arm64
#         - platform: ubuntu-latest
#           arch: arm
          - platform: ubuntu-latest
            arch: amd64

    name: Build Docker ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::973800055156:role/service-role/codebuild-developers-paradise-service-role
          aws-region: eu-central-1

      - name: extract prepare.tar
        uses: actions/download-artifact@v1
        with:
          name: prepare.tar

      - name: Build Docker
        env:
          DOCKERHUB: ${{ secrets.DOCKERHUB }}
          NECKLESS_PRIVKEY: ${{ secrets.NECKLESS_PRIVKEY }}
        run: |
          aws sts get-caller-identity
          tar xf ./prepare.tar/prepare.tar
          export DOCKER_CONFIG=$HOME/.docker
          eval $(neckless kv ls --ghAddMask  --shKeyValue AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)
          aws ecr-public get-login-password --region us-east-1 | podman login --username AWS --password-stdin public.ecr.aws
          make all REPO=public.ecr.aws/d3g6c8d4 DOCKER="sudo podman"
          make push REPO=public.ecr.aws/d3g6c8d4 DOCKER="sudo podman"

          #find . -ls | grep -v node_modules
          # make -dn all REPO=public.ecr.aws/d3g6c8d4

