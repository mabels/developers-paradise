
#RUN mv /usr/bin/uname /usr/bin/uname.orig && \
#   (echo "#!/bin/sh" ; echo '/usr/bin/uname.orig $@ | sed "s/armv8l/armv7l/g"') > /usr/bin/uname && \
#    chmod 755 /usr/bin/uname

#RUN curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
#    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list && \
#    DEBIAN_FRONTEND=noninteractive apt update && \
#    DEBIAN_FRONTEND=noninteractive apt install -y kubectl && \
#    DEBIAN_FRONTEND=noninteractive apt clean
#
COPY post-clean.sh   /post-clean.sh
COPY .build_versions /BUILD_VERSIONS
COPY .rev /BUILD_TAG

RUN VERSION=@@GO_VERSION@@ && \
    mkdir -p /usr/local && cd /usr/local && \
    if [ $(uname -m) = "x86_64" ]; then \
      curl -sS -L -o golang.tar.gz https://golang.org/dl/go$VERSION.linux-amd64.tar.gz ; \
    elif [ $(uname -m) = "aarch64" ]; then \
      curl -sS -L -o golang.tar.gz https://golang.org/dl/go$VERSION.linux-arm64.tar.gz ; \
    elif [ $(uname -m) = "armv7l" ]; then \
      curl -sS -L -o golang.tar.gz https://golang.org/dl/go$VERSION.linux-armv6l.tar.gz ; \
    fi; \
    tar xzf golang.tar.gz && rm golang.tar.gz && \
    cd bin && ln -s ../go/bin/* .

RUN VERSION=@@KUBERNETES_KUBERNETES_VERSION@@ && \
    git clone -b $VERSION --depth 1 https://github.com/kubernetes/kubernetes.git && \
    cd kubernetes && \
    make kubectl && \
    cp ./_output/local/go/bin/kubectl /usr/local/bin && \
    cd .. && bash /post-clean.sh kubernetes

RUN VERSION=@@HELM_HELM_VERSION@@ && \
    git clone -b $VERSION --depth 1 https://github.com/helm/helm.git && \
    cd helm && make && install bin/helm /usr/local/bin && \
    cd .. && bash /post-clean.sh helm

ENV HELM_PLUGIN_DIR /usr/local/helm/plugins
ENV HELM_PLUGINS /usr/local/helm/plugins

RUN export HELM_HOME=/usr/local/helm && \
    export GOPATH=$HOME/go && \
    export PATH=$GOPATH/bin:$PATH && \
    echo "export HELM_PLUGIN_DIR=/usr/local/helm/plugins" >> /usr/local/env.sh && \
    echo "::set-env name=HELM_PLUGIN_DIR::/usr/local/helm/plugins" >> /usr/local/env.sh && \
    echo "::set-env name=HELM_PLUGINS::/usr/local/helm/plugins" >> /usr/local/env.sh && \
    echo "export HELM_PLUGINS=/usr/local/helm/plugins" >> /usr/local/env.sh && \
    go install golang.org/x/lint/golint@latest && \
    mkdir -p $GOPATH/src/github.com/databus23/ && \
    cd $GOPATH/src/github.com/databus23/ && \
    git clone --depth 1 https://github.com/databus23/helm-diff.git && \
    cd helm-diff && \
    make install && cd .. && \
    cd .. && bash /post-clean.sh helm-diff

RUN VERSION=@@ROBOLL_HELMFILE_VERSION@@ && \
    export GOPATH=$HOME/go && \
    git clone -b $VERSION --depth 1 https://github.com/roboll/helmfile.git && \
    cd helmfile && make install && \
    cp $GOPATH/bin/helmfile /usr/local/bin && \
    cd .. && bash /post-clean.sh helmfile

RUN VERSION=@@GORELEASER_GORELEASER_VERSION@@ && \
    export GOPATH=$HOME/go && \
    git clone -b $VERSION --depth 1 https://github.com/goreleaser/goreleaser.git && \
    cd goreleaser && go build && \
    cp goreleaser /usr/local/bin && cd .. && \
    cd .. && bash /post-clean.sh goreleaser


RUN VERSION=@@DOCKER_BUILDX_VERSION@@ && \
   export GOPATH=$HOME/go && \
   git clone -b $VERSION --depth 1 https://github.com/docker/buildx.git && \
   cd buildx && \
   export PKG=github.com/docker/buildx && \
   export VERSION=$(git describe --match 'v[0-9]*' --dirty='.m' --always --tags) && \
   export REVISION=$(git rev-parse HEAD)$(if ! git diff --no-ext-diff --quiet --exit-code; then echo .m; fi) && \
   echo "-X ${PKG}/version.Version=${VERSION} -X ${PKG}/version.Revision=${REVISION} -X ${PKG}/version.Package=${PKG}" | tee /tmp/.ldflags && \
   echo -n "${VERSION}" | tee /tmp/.version && \
   export LDFLAGS="-w -s" && \
   go build -ldflags "$(cat /tmp/.ldflags) ${LDFLAGS}" -o ./buildx ./cmd/buildx && \
   mkdir -p /usr/libexec/docker/cli-plugins && \
   cp ./buildx /usr/libexec/docker/cli-plugins/docker-buildx && \
   docker buildx version && \
   cd .. && bash /post-clean.sh buildx

RUN VERSION=@@MABELS_NECKLESS_VERSION@@ && \
    export GOPATH=$HOME/go && \
    git clone -b $VERSION --depth 1 https://github.com/mabels/neckless.git && \
    uname -a && uname -m && \
    cd neckless && make plain && \
    make install INSTALL_DIR=/usr/local/bin && \
    cd .. && bash /post-clean.sh neckless

RUN K9SVERSION=@@DERAILED_K9S_VERSION@@ && \
    TVIEWVERSION=@@DERAILED_TVIEW_VERSION@@ && \
    export GOPATH=$HOME/go && \
    git clone -b $K9SVERSION --depth 1 https://github.com/derailed/k9s.git && \
    git clone -b $TVIEWVERSION --depth 1 https://github.com/derailed/tview.git && \
    cd k9s && make build && \
    cp execs/k9s /usr/local/bin && cd .. && \
    bash /post-clean.sh k9s

RUN VERSION=@@99DESIGNS_AWS_VAULT_VERSION@@ && \
    export GOPATH=$HOME/go && \
    git clone -b $VERSION --depth 1 https://github.com/99designs/aws-vault.git && \
    cd aws-vault && make aws-vault && \
    cp aws-vault /usr/local/bin && cd .. && \
    bash /post-clean.sh aws-vault

#COPY ./aws-cli-ruamel-yaml.patch /
#patch -p1 < /aws-cli-ruamel-yaml.patch && \

RUN VERSION=@@AWS_AWS_CLI_VERSION@@; mkdir -p /usr/local/bin && \
    git clone -b @@BOTO_BOTOCORE_VERSION@@ --depth 1 https://github.com/boto/botocore.git && \
    cd botocore && \
    python3 -m pip install . && \
    cd .. && \
    bash /post-clean.sh botocore && \
    git clone -b $VERSION --depth 1 https://github.com/aws/aws-cli.git && \
    cd aws-cli && \
    python3 -m pip install .  && \
    /usr/local/bin/aws --version && \
    cd .. && bash /post-clean.sh aws-cli 

CMD ["/bin/bash" ]
#CMD ["/usr/bin/bash" ]
